""" Functions for extracing information from the statsmodels vector autoregressions.
"""
import numpy as np
import statsmodels

from statsmodels.tsa.vector_ar.var_model import VARResultsWrapper

def var_model_coeff_one_based(
    result: VARResultsWrapper,
    source_idx: int,
    target_idx: int,
    lag_in_source: int,
) -> float:
    """Returns the coefficient of the effect of
    `y_{source_idx}[n - lag_in_source]` on `y_{target_idx}[n]`
    where `n` is any arbitrary timestep.

    To correspond to the printout generated by `result.summary()`
    `source_idx`, `target_idx` and `lag_in_souce` are assumed to
    be one based.

    Parameters
    -----------
    result: The return value of statsmodels.ts.api.VAR.fit(...)
    source_idx: Which entry of y (the modeled time series vector)
        is the source of the effect. Assumed to be a one based index.
    target_idx: Which entry of y (the modeled time series vector)
        is impacted by the effect. Assumed to be a one based index.
    lag_in_source: The time lag that modifies the source index. Must
        be greater than zero.

    Returns
    -------
    The coefficient of the effect of
    `y_{source_idx}[n - lag_in_source]` on `y_{target_idx}[n]`
    where `n` is any arbitrary timestep.
    """
    return result.coefs[lag_in_source - 1, target_idx - 1, source_idx - 1]

def var_model_pval_one_based(
    result: VARResultsWrapper,
    source_idx: int,
    target_idx: int,
    lag_in_source: int,
) -> float:
    """Returns the p-value for the effect of
    `y_{source_idx}[n - lag_in_source]` on `y_{target_idx}[n]`
    where `n` is any arbitrary timestep.

    To correspond to the printout generated by `result.summary()`
    `source_idx`, `target_idx` and `lag_in_souce` are assumed to
    be one based.

    Parameters
    -----------
    result: The return value of statsmodels.ts.api.VAR.fit(...)
    source_idx: Which entry of y (the modeled time series vector)
        is the source of the effect. Assumed to be a one based index.
    target_idx: Which entry of y (the modeled time series vector)
        is impacted by the effect. Assumed to be a one based index.
    lag_in_source: The time lag that modifies the source index. Assumed
        to be one based. Must be greater than zero.

    Returns
    -------
    The p-value for the effect of
    `y_{source_idx}[n - lag_in_source]` on `y_{target_idx}[n]`
    where `n` is any arbitrary timestep.
    """
    return result.pvalues[(lag_in_source - 1) * result.neqs + source_idx, target_idx-1]

def coef_matrix(
    VAR_fit: VARResultsWrapper,
    timestep_lag: int = 1,
    return_pvals=False
):
    """Returns the coefficient matrix corresponding to `timestep_lag`.

    Given the model structure:
        `y_t = mu + A_1 y_{t-1} + A_2 y_{t-2} + ... + A_k y_{t-k}`

    This function returns `A_{timestep_lag}`. Optionally returns
    the p-values associated with each coefficient in addition
    to the coefficient matrix.

    Patameters
    ----------
    var_fit: The result of calling statsmodels.tsa.api.VAR(data).fit()
    timestep_lag: Defaults to 1. The lag of the desired coefficient matrix.
    return_pvals: Defaults to False. Toggles if 
    """
    num_timeseries = len(VAR_fit.names)
    coef_matrix = np.zeros((num_timeseries, num_timeseries))
    coef_pval_matrix = np.zeros((num_timeseries, num_timeseries))
    for i in range(num_timeseries):
        for j in range(num_timeseries):
            coef_matrix[i, j] = var_model_coeff_one_based(VAR_fit, i+1, j+1, timestep_lag)
            coef_pval_matrix[i, j] = var_model_pval_one_based(VAR_fit, i+1, j+1, timestep_lag)
    if return_pvals:
        return coef_matrix, coef_pval_matrix
    return coef_matrix
